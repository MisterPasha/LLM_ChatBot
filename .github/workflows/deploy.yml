name: Build & Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build_push_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set image name
        id: meta_name
        run: |
          OWNER="${{ github.repository_owner }}"
          REPO="${{ github.event.repository.name }}"
          OWNER_LC="${OWNER,,}"
          REPO_LC="${REPO,,}"
          echo "IMAGE=ghcr.io/${OWNER_LC}/${REPO_LC}-app" >> "$GITHUB_OUTPUT"
          echo "Using image: ghcr.io/${OWNER_LC}/${REPO_LC}-app"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push (latest + sha)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta_name.outputs.IMAGE }}:latest
            ${{ steps.meta_name.outputs.IMAGE }}:${{ github.sha }}

  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: build_push_image
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}          
          key: ${{ secrets.EC2_SSH_KEY }}      
          envs: GITHUB_REPOSITORY,GITHUB_SHA,GHCR_USER,GHCR_PAT      
          script: |
            set -e
            cd ~/app
            git pull || true

            # login only if private (optional)
            if [ -n "${GHCR_USER}" ] && [ -n "${GHCR_PAT}" ]; then
              echo "${GHCR_PAT}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin
            fi

            OWNER="${{ github.repository_owner }}"
            REPO="${{ github.event.repository.name }}"
            OWNER_LC="${OWNER,,}"
            REPO_LC="${REPO,,}"
            APP_IMAGE="ghcr.io/${OWNER_LC}/${REPO_LC}-app:${GITHUB_SHA}"
            echo "Deploying image: $APP_IMAGE"

            APP_IMAGE="$APP_IMAGE" docker compose -f docker-compose.prod.yml pull app || true
            APP_IMAGE="$APP_IMAGE" docker compose -f docker-compose.prod.yml up -d app
            docker compose -f docker-compose.prod.yml exec -T ollama ollama pull llama3.2:1b || true
            docker compose -f docker-compose.prod.yml exec -T ollama ollama pull nomic-embed-text || true
            docker compose -f docker-compose.prod.yml ps